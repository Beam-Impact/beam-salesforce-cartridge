<isset value="${dw.system.Site.current.preferences.custom}" name="sitePref" scope="page"/>
<isset value="${dw.web.URLUtils.url('Cart-UpdateBeamCustomAttributes')}" name="updateBeamCustomAttributesEndpoint" scope="page" />
<isset value="${request.getHttpLocale()}" name="currentLocale" scope="page"/>
<isset value="${currentLocale.split('_')[0]}" name="languageCode" scope="page"/>
<isset value="${sitePref.beamSupportedLang}" name="supportedLang" scope="page" />
<isset value="${supportedLang && supportedLang.split(',').indexOf(languageCode) !== -1 ? languageCode : sitePref.beamDefaultLang}" name="finalLanguageCode" scope="page"/>


<script type="module" src="https://sdk.beamimpact.com/web-sdk/${sitePref.beamVersion}/dist/components/select-nonprofit.js"></script>

<script type="module">
    import {
        /** @type {typeof import('@beamimpact/web-sdk/dist/integrations/beam').getConfig} */
            getConfig
    } from 'https://sdk.beamimpact.com/web-sdk/${sitePref.beamVersion}/dist/integrations/beam.js';
    import {
        /** @type {typeof import('@beamimpact/web-sdk/dist/integrations/cart').updateCart} */
            updateCart,
    } from 'https://sdk.beamimpact.com/web-sdk/${sitePref.beamVersion}/dist/integrations/cart.js';
    import {
        /** @type {typeof import('@beamimpact/web-sdk/dist/utils').initNetworkListeners} */
            initNetworkListeners,
        /** @type {typeof import('@beamimpact/web-sdk/dist/utils').events} */
            events,
        /** @type {typeof import('@beamimpact/web-sdk/dist/utils').getCookieValue} */
            getCookieValue,
    } from 'https://sdk.beamimpact.com/web-sdk/${sitePref.beamVersion}/dist/utils/index.js';

    var beamConfig = getConfig();

    await beamConfig.readyPromise;
    // 1. Initial page load - get Beam cart from page data
    var beamCart =
        <isscript>
            out.print( JSON.stringify(pdict.beamCart) );
        </isscript>;

    updateCart(beamConfig, beamCart);

    // 2. Listen for changes to cart via API

    initNetworkListeners(); // Will emit Beam network call events whenever the site makes an AJAX call

    async function updateCustomAttributes(payload) {
        try {
            const url = `${updateBeamCustomAttributesEndpoint}`
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });
            // Check for HTTP errors
            if (!response.ok) {
                console.error('Network response was not ok:', response.statusText);
                return;
            }

            const result = await response.json();

            if (!result.success) {
                console.error('Error updating basket custom attributes:', result.error);
            }
        } catch (error) {
            console.error('Fetch error:', error);
        }
    }

function getBeamCartId() {
    // check the cookie for the beam cart ID
    const beamCartCookie = getCookieValue("beam_cart");

    if (beamCartCookie) {
        return beamCartCookie;
    }

    // fallback to localStorage
    // Get the beamCartId from localStorage
    const beamCartIdKey = `beam_cart_key_${sitePref.beamApiKey}`;
    const beamCartObj = window.localStorage.getItem(beamCartIdKey);

    if (!beamCartObj) {
        return null;
    }

    try {
        const parsedObj = JSON.parse(beamCartObj);
        const beamCartId = parsedObj?.beamCartId;

        return beamCartId || null;
    } catch (error) {
        return null;
    }
}

    window.addEventListener(events.BeamNetworkCallEvent.eventName, async (event) => {
        const cartActionPaths =
            Object.values(
                <isscript>
                    out.print( JSON.stringify(pdict.actionUrls) );
                </isscript>
            ) || [];
        const requestUrlStr = event.detail.type === 'xhr' ? event.detail.xhr.responseURL : event.detail.response.url;
        const url = new URL(requestUrlStr);
        if (!cartActionPaths.some(path => url.pathname.includes(path))) {
            return;
        };
        const responseBody = event.detail.type === 'xhr'
            ? JSON.parse(event.detail?.xhr?.response ||  '{}')
            : await event.detail?.response?.json();
        const beamCart = responseBody?.beamCart || responseBody?.basket?.beamCart;
        const beamCartId = getBeamCartId();
        if (beamCart) {
            await updateCart(beamConfig, beamCart); // Send data to Beam to update expiration time, etc.

            window.dispatchEvent(new events.BeamCartChangeEvent({
                schema: {
                    source: "generic"
                },
                ...beamCart,
                beamCartId
            })); // Notify widgets to reload
        }
    });

    window.addEventListener(events.BeamCartChangeEvent.eventName, async (event) => {
        const beamCartId = getBeamCartId();

        const payload = {
            cartId: beamCartId
        }

        await updateCustomAttributes(payload);
     })

     window.addEventListener(events.BeamNonprofitSelectEvent.eventName, async (event) => {
        const nonprofitId = event.detail.selectedNonprofitId
        const selectionId = event.detail.selectionId
        const beamCartId = getBeamCartId();

        const payload = {
            nonprofitId,
            selectionId,
            cartId: beamCartId
        };

        await updateCustomAttributes(payload);
     })
</script>

<beam-select-nonprofit
    apikey="${sitePref.beamApiKey}"
    chainid="${sitePref.beamChainId}"
    storeid="${sitePref.beamStoreId}"
    baseurl="${sitePref.beamBaseUrl}"
    lang="${finalLanguageCode}">
</beam-select-nonprofit>
